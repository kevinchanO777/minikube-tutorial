# Create K8s deployment and service (usually group together in 1 single file)

# replicas: scaling your pods
# DO NOT use deployment to scale DB. Use statefulSet instead

# template: configuration for the pod
# containers: the list of containers (usually 1 container per pod)
# containerPort: !!! Check the default port provided in the image
# labels: additional identifier e.g. "release" : "stable", "env" : "dev"
# labels: are a required fields for pods, and it's a good practice to use label elsewhere
 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
  labels:
    app: webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp
  template:           
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: nanajanashia/k8s-demo-app:v1.0
        ports:
        - containerPort: 3000
        env:
        - name: USER_NAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: mongo-user
        - name: USER_PWD
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: mongo-pwd
        - name: DB_URL
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-url

---

# Service forward a request to a pod so it require a selector
# port: service is accessible within its cluster using ip address and port (doesn't really matter, better be the same with targetPort)
# targetPort: SHOULD always be the same with containerPort above
# To make this service accessible from outside of the cluster (e.g. the browser) we specify type: NodePort 
# nodePort: exposes the Service on each Node's IP at a static port defined by K8s (30000 ~ 32767)

apiVersion: v1
kind: Service
metadata:
  name: webapp-service
spec:
  type: NodePort
  selector:
    app: webapp
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 30100
